---
apiVersion: v1
data:
  authtoken: ${EQUINIX_METAL_API_TOKEN}
kind: Secret
metadata:
  name: cluster-autoscaler-packet
  namespace: kube-system
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: cluster-autoscaler-cloud-config
  namespace: kube-system
type: Opaque
stringData:
  # kubeadm, kubelet, kubectl are pinned to version 1.17.4
  # The version can be altered by decoding the cloudinit and updating it to
  # the desired version
  # In the cloud-config you must always have a valid default nodegroup
  cloud-config: |-
    [nodegroupdef "default"]
    project-id=${EQUINIX_METAL_PROJECT_ID}
    api-server-endpoint=${KUBERNETES_API_IP_ADDRESS}:${KUBERNETES_API_PORT}
    facility=${FACILITY}
    os=ubuntu_22_04
    plan=${PLAN}
    billing=hourly
    cloudinit=IyEvYmluL2Jhc2gKCmVjaG8gJyogbGlicmFyaWVzL3Jlc3RhcnQtd2l0aG91dC1hc2tpbmcgYm9vbGVhbiB0cnVlJyB8IHN1ZG8gZGViY29uZi1zZXQtc2VsZWN0aW9ucwoKZWNobyAiWy0tLS0tLSBCZWdpbiBzZXR1cC1iYXNlLnNoIC0tLS0tXSIKCiMgQmFzZSBrdWJlcm5ldGVzIHJlcXVpcmVtZW50cwplY2hvICJFbmFibGUgRm9yd2FyZGluZyIKCmNhdCA8PEVPRiA+IC9ldGMvc3lzY3RsLmQvazhzLmNvbmYKbmV0LmJyaWRnZS5icmlkZ2UtbmYtY2FsbC1pcDZ0YWJsZXMgPSAxCm5ldC5icmlkZ2UuYnJpZGdlLW5mLWNhbGwtaXB0YWJsZXMgPSAxCm5ldC5pcHY0LmlwX2ZvcndhcmQgPSAxCkVPRgoKc3lzY3RsIC0tc3lzdGVtCgplY2hvICJEaXNhYmxlIHN3YXAiCnN3YXBvZmYgLWEKc2VkIC1pLmJhayAnL3N3YXAvcy9eLyMvZycgL2V0Yy9mc3RhYgoKIyBWZXJpZnkKY2F0IC9wcm9jL3N3YXBzCgojIEluc3RhbGwganEKYXB0LWdldCBpbnN0YWxsIC15IGpxCgplY2hvICJbLS0tLS0gc2V0dXAtYmFzZS5zaCBDb21wbGV0ZSAtLS0tLV0iCgplY2hvICJbLS0tLS0gQmVnaW4gaW5zdGFsbC1jcmkuc2ggLS0tLV0iCgplY2hvICcqIGxpYnJhcmllcy9yZXN0YXJ0LXdpdGhvdXQtYXNraW5nIGJvb2xlYW4gdHJ1ZScgfCBzdWRvIGRlYmNvbmYtc2V0LXNlbGVjdGlvbnMKCiMjIyBJbnN0YWxsIHBhY2thZ2VzIHRvIGFsbG93IGFwdCB0byB1c2UgYSByZXBvc2l0b3J5IG92ZXIgSFRUUFMKYXB0LWdldCB1cGRhdGUgXAogICYmIGFwdC1nZXQgaW5zdGFsbCAteSBcCiAgYXB0LXRyYW5zcG9ydC1odHRwcyBcCiAgY2EtY2VydGlmaWNhdGVzIFwKICBjdXJsIFwKICBzb2Z0d2FyZS1wcm9wZXJ0aWVzLWNvbW1vbiBcCiAgZ251cGcgXAogIGxzYi1yZWxlYXNlCgplY2hvICJbLS0tLS0gQmVnaW4gaW5zdGFsbGluZyBEb2NrZXIgQ0UgLS0tLV0iCgojIyMgQWRkIERvY2tlcuKAmXMgb2ZmaWNpYWwgR1BHIGtleQpzdWRvIGluc3RhbGwgLW0gMDc1NSAtZCAvZXRjL2FwdC9rZXlyaW5ncwpjdXJsIC1mc1NMIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUvZ3BnIHwgc3VkbyBncGcgLS1kZWFybW9yIC1vIC9ldGMvYXB0L2tleXJpbmdzL2RvY2tlci5ncGcKc3VkbyBjaG1vZCBhK3IgL2V0Yy9hcHQva2V5cmluZ3MvZG9ja2VyLmdwZwoKIyMjIEFkZCBEb2NrZXIgYXB0IHJlcG9zaXRvcnkKZWNobyBcCiAgImRlYiBbYXJjaD0iJChkcGtnIC0tcHJpbnQtYXJjaGl0ZWN0dXJlKSIgc2lnbmVkLWJ5PS9ldGMvYXB0L2tleXJpbmdzL2RvY2tlci5ncGddIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUgXAogICIkKC4gL2V0Yy9vcy1yZWxlYXNlICYmIGVjaG8gIiRWRVJTSU9OX0NPREVOQU1FIikiIHN0YWJsZSIgfCBcCiAgc3VkbyB0ZWUgL2V0Yy9hcHQvc291cmNlcy5saXN0LmQvZG9ja2VyLmxpc3QgPiAvZGV2L251bGwKCiMjIEluc3RhbGwgRG9ja2VyIENFCmFwdC1nZXQgdXBkYXRlIFwKICAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgXAogIGRvY2tlci1jZSBkb2NrZXItY2UtY2xpIGNvbnRhaW5lcmQuaW8gZG9ja2VyLWJ1aWxkeC1wbHVnaW4gZG9ja2VyLWNvbXBvc2UtcGx1Z2luCgojIFNldHVwIGRhZW1vbgpjYXQgPiAvZXRjL2RvY2tlci9kYWVtb24uanNvbiA8PEVPRgp7CiAgImV4ZWMtb3B0cyI6IFsibmF0aXZlLmNncm91cGRyaXZlcj1zeXN0ZW1kIl0sCiAgImxvZy1kcml2ZXIiOiAianNvbi1maWxlIiwKICAibG9nLW9wdHMiOiB7CiAgICAibWF4LXNpemUiOiAiMTAwbSIKICB9LAogICJzdG9yYWdlLWRyaXZlciI6ICJvdmVybGF5MiIKfQpFT0YKCm1rZGlyIC1wIC9ldGMvc3lzdGVtZC9zeXN0ZW0vZG9ja2VyLnNlcnZpY2UuZAoKIyBSZXN0YXJ0IGRvY2tlcgpzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZApzeXN0ZW1jdGwgcmVzdGFydCBkb2NrZXIKCmVjaG8gIlstLS0tLSBCZWdpbiBjb25maWd1cmluZyBDb250YWluZXJkIC0tLS1dIgoKIyBDb25maWd1cmUgQ29udGFpbmVyZCBmb3IgS3ViZXJuZXRlcyBDUkkKCmNhdCA8PEVPRiB8IHN1ZG8gdGVlIC9ldGMvbW9kdWxlcy1sb2FkLmQvY29udGFpbmVyZC5jb25mCm92ZXJsYXkKYnJfbmV0ZmlsdGVyCkVPRgoKc3VkbyBtb2Rwcm9iZSBvdmVybGF5CnN1ZG8gbW9kcHJvYmUgYnJfbmV0ZmlsdGVyCgpta2RpciAtcCAvZXRjL2NvbnRhaW5lcmQKY29udGFpbmVyZCBjb25maWcgZGVmYXVsdCB8IHN1ZG8gdGVlIC9ldGMvY29udGFpbmVyZC9jb25maWcudG9tbApzZWQgLWkgJ3MvU3lzdGVtZENncm91cCBcPSBmYWxzZS9TeXN0ZW1kQ2dyb3VwIFw9IHRydWUvZycgL2V0Yy9jb250YWluZXJkL2NvbmZpZy50b21sCnN5c3RlbWN0bCByZXN0YXJ0IGNvbnRhaW5lcmQKc3lzdGVtY3RsIGVuYWJsZSBjb250YWluZXJkCgpjYXQgPDxFT0YgfCBzdWRvIHRlZSAvZXRjL2NyaWN0bC55YW1sCnJ1bnRpbWUtZW5kcG9pbnQ6IHVuaXg6Ly8vcnVuL2NvbnRhaW5lcmQvY29udGFpbmVyZC5zb2NrCmltYWdlLWVuZHBvaW50OiB1bml4Oi8vL3J1bi9jb250YWluZXJkL2NvbnRhaW5lcmQuc29jawp0aW1lb3V0OiAyCmRlYnVnOiBmYWxzZQpwdWxsLWltYWdlLW9uLWNyZWF0ZTogdHJ1ZQpFT0YKCmVjaG8gIlstLS0tLSBpbnN0YWxsLWNyaS5zaCBDb21wbGV0ZSAtLS0tLS1dIgoKCgpIT1NUTkFNRT0kKGhvc3RuYW1lIC1zKQojIEdldCBQYWNrZXQgc2VydmVyJ3MgcHJpdmF0ZSBJUCBhZGRyZXNzCkxPQ0FMX0lQPSQoaXAgYSB8IGdyZXAgImluZXQgMTAiIHwgY3V0IC1kIiAiIC1mNiB8IGN1dCAtZCIvIiAtZjEpCgpnZXRfdmVyc2lvbiAoKSB7CglQQUNLQUdFPSQxCglWRVJTSU9OPSQyCglhcHQtY2FjaGUgbWFkaXNvbiAkUEFDS0FHRSB8IGdyZXAgJFZFUlNJT04gfCBoZWFkIC0xIHwgYXdrICd7cHJpbnQgJDN9Jwp9CgplY2hvICJbLS0tLS0gU2V0dGluZyB1cCBrdWJlcm5ldGVzIGNvbmZpZ3VyYXRpb25zIC0tLS0tXSIKCmFwdC1nZXQgdXBkYXRlCmFwdC1nZXQgaW5zdGFsbCAteSBhcHQtdHJhbnNwb3J0LWh0dHBzIGNhLWNlcnRpZmljYXRlcyBjdXJsCgojVEhJUyBSRVBPU0lUT1JZIEtFWSBOTyBMT05HRVIgV09SS1MKI2N1cmwgLWZzU0xvIC9ldGMvYXB0L2tleXJpbmdzL2t1YmVybmV0ZXMtYXJjaGl2ZS1rZXlyaW5nLmdwZyBodHRwczovL3BhY2thZ2VzLmNsb3VkLmdvb2dsZS5jb20vYXB0L2RvYy9hcHQta2V5LmdwZwojZWNobyAiZGViIFtzaWduZWQtYnk9L2V0Yy9hcHQva2V5cmluZ3Mva3ViZXJuZXRlcy1hcmNoaXZlLWtleXJpbmcuZ3BnXSBodHRwczovL2FwdC5rdWJlcm5ldGVzLmlvLyBrdWJlcm5ldGVzLXhlbmlhbCBtYWluIiB8IHN1ZG8gdGVlIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2t1YmVybmV0ZXMubGlzdAoKI1JlZmVycmluZyB0byBodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy9rOHMuaW8vcHVsbC80ODM3CgojVGhleSBoYXZlIHVwZGF0ZWQgdGhlaXIgaG9zdCBhZGRyZXNzLCBzbyBub3cgd2Ugc2hvdWxkIHVwZGF0ZSBpdCB0byB1c2UgdGhlIGtleSBmcm9tIGh0dHBzOi8vZGwuazhzLmlvL2FwdC9kb2MvYXB0LWtleS5ncGcuIFRoZW4gdXNlIHNvbWV0aGluZyBsaWtlOgoKc3VkbyBjdXJsIC1mc1NMbyAvdXNyL3NoYXJlL2tleXJpbmdzL2t1YmVybmV0ZXMtYXJjaGl2ZS1rZXlyaW5nLmdwZyBodHRwczovL2RsLms4cy5pby9hcHQvZG9jL2FwdC1rZXkuZ3BnCmVjaG8gImRlYiBbc2lnbmVkLWJ5PS91c3Ivc2hhcmUva2V5cmluZ3Mva3ViZXJuZXRlcy1hcmNoaXZlLWtleXJpbmcuZ3BnXSBodHRwczovL2FwdC5rdWJlcm5ldGVzLmlvLyBrdWJlcm5ldGVzLXhlbmlhbCBtYWluIiB8IHN1ZG8gdGVlIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2t1YmVybmV0ZXMubGlzdAoKI0Rvbid0IGFkZCB0cnVzdGVkPXllcyEgVGhpcyBpcyBkYW5nZXJvdXMgYW5kIHdpbGwgdGVsbCBhcHQgdG8gaWdub3JlIHRoZSByZXN1bHQgb2Yga2V5IHZlcmlmaWNhdGlvbi4KCiNUSEUgRk9MTE9XSU5HIFdPUktTIEFTIFdFTEwKI2N1cmwgLWZzU0wgImh0dHBzOi8vcGFja2FnZXMuY2xvdWQuZ29vZ2xlLmNvbS9hcHQvZG9jL2FwdC1rZXkuZ3BnIiB8IHN1ZG8gZ3BnIC0tZGVhcm1vciAtbyAvZXRjL2FwdC90cnVzdGVkLmdwZy5kL2t1YmVybmV0ZXMtYXJjaGl2ZS1rZXlyaW5nLmdwZwojZWNobyAnZGViIGh0dHBzOi8vcGFja2FnZXMuY2xvdWQuZ29vZ2xlLmNvbS9hcHQga3ViZXJuZXRlcy14ZW5pYWwgbWFpbicgPiAvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9rdWJlcm5ldGVzLmxpc3QKCmFwdC1nZXQgdXBkYXRlCmFwdC1nZXQgaW5zdGFsbCAteSBcCglrdWJlbGV0PSQoZ2V0X3ZlcnNpb24ga3ViZWxldCAxLjI3LjEpIFwKCWt1YmVhZG09JChnZXRfdmVyc2lvbiBrdWJlYWRtIDEuMjcuMSkgXAoJa3ViZWN0bD0kKGdldF92ZXJzaW9uIGt1YmVjdGwgMS4yNy4xKSBcCgljcmktdG9vbHMKCiMgTWFrZSB0aGUga3ViZWxldCB1c2Ugb25seSB0aGUgcHJpdmF0ZSBJUCB0byBydW4gaXQncyBtYW5hZ2VtZW50IGNvbnRyb2xsZXIgcG9kcwplY2hvICJLVUJFTEVUX0VYVFJBX0FSR1M9XCItLW5vZGUtaXA9JExPQ0FMX0lQIC0tYWRkcmVzcz0kTE9DQUxfSVAgLS1jbG91ZC1wcm92aWRlcj1leHRlcm5hbFwiIiA+IC9ldGMvZGVmYXVsdC9rdWJlbGV0CgplY2hvICJbLS0tLSBEb25lIHNldHRpbmcgdXAga3ViZXJuZXRlcyBjb25maWd1cmF0aW9ucyAtLS0tLV0iCgprdWJlYWRtIGpvaW4gLS1kaXNjb3ZlcnktdG9rZW4tdW5zYWZlLXNraXAtY2EtdmVyaWZpY2F0aW9uIC0tdG9rZW4ge3suQm9vdHN0cmFwVG9rZW5JRH19Lnt7LkJvb3RzdHJhcFRva2VuU2VjcmV0fX0ge3suQVBJU2VydmVyRW5kcG9pbnR9fQ==
    reservation=prefer
    hostname-pattern=k8s-{{.ClusterName}}-{{.NodeGroup}}-{{.RandString8}}

    [nodegroupdef "pool2"]
    project-id=${EQUINIX_METAL_PROJECT_ID}
    api-server-endpoint=${KUBERNETES_API_IP_ADDRESS}:${KUBERNETES_API_PORT}
    facility=${FACILITY}
    os=ubuntu_22_04
    plan=${PLAN}
    billing=hourly
    cloudinit=IyEvYmluL2Jhc2gKCmVjaG8gJyogbGlicmFyaWVzL3Jlc3RhcnQtd2l0aG91dC1hc2tpbmcgYm9vbGVhbiB0cnVlJyB8IHN1ZG8gZGViY29uZi1zZXQtc2VsZWN0aW9ucwoKZWNobyAiWy0tLS0tLSBCZWdpbiBzZXR1cC1iYXNlLnNoIC0tLS0tXSIKCiMgQmFzZSBrdWJlcm5ldGVzIHJlcXVpcmVtZW50cwplY2hvICJFbmFibGUgRm9yd2FyZGluZyIKCmNhdCA8PEVPRiA+IC9ldGMvc3lzY3RsLmQvazhzLmNvbmYKbmV0LmJyaWRnZS5icmlkZ2UtbmYtY2FsbC1pcDZ0YWJsZXMgPSAxCm5ldC5icmlkZ2UuYnJpZGdlLW5mLWNhbGwtaXB0YWJsZXMgPSAxCm5ldC5pcHY0LmlwX2ZvcndhcmQgPSAxCkVPRgoKc3lzY3RsIC0tc3lzdGVtCgplY2hvICJEaXNhYmxlIHN3YXAiCnN3YXBvZmYgLWEKc2VkIC1pLmJhayAnL3N3YXAvcy9eLyMvZycgL2V0Yy9mc3RhYgoKIyBWZXJpZnkKY2F0IC9wcm9jL3N3YXBzCgojIEluc3RhbGwganEKYXB0LWdldCBpbnN0YWxsIC15IGpxCgplY2hvICJbLS0tLS0gc2V0dXAtYmFzZS5zaCBDb21wbGV0ZSAtLS0tLV0iCgplY2hvICJbLS0tLS0gQmVnaW4gaW5zdGFsbC1jcmkuc2ggLS0tLV0iCgplY2hvICcqIGxpYnJhcmllcy9yZXN0YXJ0LXdpdGhvdXQtYXNraW5nIGJvb2xlYW4gdHJ1ZScgfCBzdWRvIGRlYmNvbmYtc2V0LXNlbGVjdGlvbnMKCiMjIyBJbnN0YWxsIHBhY2thZ2VzIHRvIGFsbG93IGFwdCB0byB1c2UgYSByZXBvc2l0b3J5IG92ZXIgSFRUUFMKYXB0LWdldCB1cGRhdGUgXAogICYmIGFwdC1nZXQgaW5zdGFsbCAteSBcCiAgYXB0LXRyYW5zcG9ydC1odHRwcyBcCiAgY2EtY2VydGlmaWNhdGVzIFwKICBjdXJsIFwKICBzb2Z0d2FyZS1wcm9wZXJ0aWVzLWNvbW1vbiBcCiAgZ251cGcgXAogIGxzYi1yZWxlYXNlCgplY2hvICJbLS0tLS0gQmVnaW4gaW5zdGFsbGluZyBEb2NrZXIgQ0UgLS0tLV0iCgojIyMgQWRkIERvY2tlcuKAmXMgb2ZmaWNpYWwgR1BHIGtleQpzdWRvIGluc3RhbGwgLW0gMDc1NSAtZCAvZXRjL2FwdC9rZXlyaW5ncwpjdXJsIC1mc1NMIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUvZ3BnIHwgc3VkbyBncGcgLS1kZWFybW9yIC1vIC9ldGMvYXB0L2tleXJpbmdzL2RvY2tlci5ncGcKc3VkbyBjaG1vZCBhK3IgL2V0Yy9hcHQva2V5cmluZ3MvZG9ja2VyLmdwZwoKIyMjIEFkZCBEb2NrZXIgYXB0IHJlcG9zaXRvcnkKZWNobyBcCiAgImRlYiBbYXJjaD0iJChkcGtnIC0tcHJpbnQtYXJjaGl0ZWN0dXJlKSIgc2lnbmVkLWJ5PS9ldGMvYXB0L2tleXJpbmdzL2RvY2tlci5ncGddIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUgXAogICIkKC4gL2V0Yy9vcy1yZWxlYXNlICYmIGVjaG8gIiRWRVJTSU9OX0NPREVOQU1FIikiIHN0YWJsZSIgfCBcCiAgc3VkbyB0ZWUgL2V0Yy9hcHQvc291cmNlcy5saXN0LmQvZG9ja2VyLmxpc3QgPiAvZGV2L251bGwKCiMjIEluc3RhbGwgRG9ja2VyIENFCmFwdC1nZXQgdXBkYXRlIFwKICAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgXAogIGRvY2tlci1jZSBkb2NrZXItY2UtY2xpIGNvbnRhaW5lcmQuaW8gZG9ja2VyLWJ1aWxkeC1wbHVnaW4gZG9ja2VyLWNvbXBvc2UtcGx1Z2luCgojIFNldHVwIGRhZW1vbgpjYXQgPiAvZXRjL2RvY2tlci9kYWVtb24uanNvbiA8PEVPRgp7CiAgImV4ZWMtb3B0cyI6IFsibmF0aXZlLmNncm91cGRyaXZlcj1zeXN0ZW1kIl0sCiAgImxvZy1kcml2ZXIiOiAianNvbi1maWxlIiwKICAibG9nLW9wdHMiOiB7CiAgICAibWF4LXNpemUiOiAiMTAwbSIKICB9LAogICJzdG9yYWdlLWRyaXZlciI6ICJvdmVybGF5MiIKfQpFT0YKCm1rZGlyIC1wIC9ldGMvc3lzdGVtZC9zeXN0ZW0vZG9ja2VyLnNlcnZpY2UuZAoKIyBSZXN0YXJ0IGRvY2tlcgpzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZApzeXN0ZW1jdGwgcmVzdGFydCBkb2NrZXIKCmVjaG8gIlstLS0tLSBCZWdpbiBjb25maWd1cmluZyBDb250YWluZXJkIC0tLS1dIgoKIyBDb25maWd1cmUgQ29udGFpbmVyZCBmb3IgS3ViZXJuZXRlcyBDUkkKCmNhdCA8PEVPRiB8IHN1ZG8gdGVlIC9ldGMvbW9kdWxlcy1sb2FkLmQvY29udGFpbmVyZC5jb25mCm92ZXJsYXkKYnJfbmV0ZmlsdGVyCkVPRgoKc3VkbyBtb2Rwcm9iZSBvdmVybGF5CnN1ZG8gbW9kcHJvYmUgYnJfbmV0ZmlsdGVyCgpta2RpciAtcCAvZXRjL2NvbnRhaW5lcmQKY29udGFpbmVyZCBjb25maWcgZGVmYXVsdCB8IHN1ZG8gdGVlIC9ldGMvY29udGFpbmVyZC9jb25maWcudG9tbApzZWQgLWkgJ3MvU3lzdGVtZENncm91cCBcPSBmYWxzZS9TeXN0ZW1kQ2dyb3VwIFw9IHRydWUvZycgL2V0Yy9jb250YWluZXJkL2NvbmZpZy50b21sCnN5c3RlbWN0bCByZXN0YXJ0IGNvbnRhaW5lcmQKc3lzdGVtY3RsIGVuYWJsZSBjb250YWluZXJkCgpjYXQgPDxFT0YgfCBzdWRvIHRlZSAvZXRjL2NyaWN0bC55YW1sCnJ1bnRpbWUtZW5kcG9pbnQ6IHVuaXg6Ly8vcnVuL2NvbnRhaW5lcmQvY29udGFpbmVyZC5zb2NrCmltYWdlLWVuZHBvaW50OiB1bml4Oi8vL3J1bi9jb250YWluZXJkL2NvbnRhaW5lcmQuc29jawp0aW1lb3V0OiAyCmRlYnVnOiBmYWxzZQpwdWxsLWltYWdlLW9uLWNyZWF0ZTogdHJ1ZQpFT0YKCmVjaG8gIlstLS0tLSBpbnN0YWxsLWNyaS5zaCBDb21wbGV0ZSAtLS0tLS1dIgoKCgpIT1NUTkFNRT0kKGhvc3RuYW1lIC1zKQojIEdldCBQYWNrZXQgc2VydmVyJ3MgcHJpdmF0ZSBJUCBhZGRyZXNzCkxPQ0FMX0lQPSQoaXAgYSB8IGdyZXAgImluZXQgMTAiIHwgY3V0IC1kIiAiIC1mNiB8IGN1dCAtZCIvIiAtZjEpCgpnZXRfdmVyc2lvbiAoKSB7CglQQUNLQUdFPSQxCglWRVJTSU9OPSQyCglhcHQtY2FjaGUgbWFkaXNvbiAkUEFDS0FHRSB8IGdyZXAgJFZFUlNJT04gfCBoZWFkIC0xIHwgYXdrICd7cHJpbnQgJDN9Jwp9CgplY2hvICJbLS0tLS0gU2V0dGluZyB1cCBrdWJlcm5ldGVzIGNvbmZpZ3VyYXRpb25zIC0tLS0tXSIKCmFwdC1nZXQgdXBkYXRlCmFwdC1nZXQgaW5zdGFsbCAteSBhcHQtdHJhbnNwb3J0LWh0dHBzIGNhLWNlcnRpZmljYXRlcyBjdXJsCgojVEhJUyBSRVBPU0lUT1JZIEtFWSBOTyBMT05HRVIgV09SS1MKI2N1cmwgLWZzU0xvIC9ldGMvYXB0L2tleXJpbmdzL2t1YmVybmV0ZXMtYXJjaGl2ZS1rZXlyaW5nLmdwZyBodHRwczovL3BhY2thZ2VzLmNsb3VkLmdvb2dsZS5jb20vYXB0L2RvYy9hcHQta2V5LmdwZwojZWNobyAiZGViIFtzaWduZWQtYnk9L2V0Yy9hcHQva2V5cmluZ3Mva3ViZXJuZXRlcy1hcmNoaXZlLWtleXJpbmcuZ3BnXSBodHRwczovL2FwdC5rdWJlcm5ldGVzLmlvLyBrdWJlcm5ldGVzLXhlbmlhbCBtYWluIiB8IHN1ZG8gdGVlIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2t1YmVybmV0ZXMubGlzdAoKI1JlZmVycmluZyB0byBodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy9rOHMuaW8vcHVsbC80ODM3CgojVGhleSBoYXZlIHVwZGF0ZWQgdGhlaXIgaG9zdCBhZGRyZXNzLCBzbyBub3cgd2Ugc2hvdWxkIHVwZGF0ZSBpdCB0byB1c2UgdGhlIGtleSBmcm9tIGh0dHBzOi8vZGwuazhzLmlvL2FwdC9kb2MvYXB0LWtleS5ncGcuIFRoZW4gdXNlIHNvbWV0aGluZyBsaWtlOgoKc3VkbyBjdXJsIC1mc1NMbyAvdXNyL3NoYXJlL2tleXJpbmdzL2t1YmVybmV0ZXMtYXJjaGl2ZS1rZXlyaW5nLmdwZyBodHRwczovL2RsLms4cy5pby9hcHQvZG9jL2FwdC1rZXkuZ3BnCmVjaG8gImRlYiBbc2lnbmVkLWJ5PS91c3Ivc2hhcmUva2V5cmluZ3Mva3ViZXJuZXRlcy1hcmNoaXZlLWtleXJpbmcuZ3BnXSBodHRwczovL2FwdC5rdWJlcm5ldGVzLmlvLyBrdWJlcm5ldGVzLXhlbmlhbCBtYWluIiB8IHN1ZG8gdGVlIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2t1YmVybmV0ZXMubGlzdAoKI0Rvbid0IGFkZCB0cnVzdGVkPXllcyEgVGhpcyBpcyBkYW5nZXJvdXMgYW5kIHdpbGwgdGVsbCBhcHQgdG8gaWdub3JlIHRoZSByZXN1bHQgb2Yga2V5IHZlcmlmaWNhdGlvbi4KCiNUSEUgRk9MTE9XSU5HIFdPUktTIEFTIFdFTEwKI2N1cmwgLWZzU0wgImh0dHBzOi8vcGFja2FnZXMuY2xvdWQuZ29vZ2xlLmNvbS9hcHQvZG9jL2FwdC1rZXkuZ3BnIiB8IHN1ZG8gZ3BnIC0tZGVhcm1vciAtbyAvZXRjL2FwdC90cnVzdGVkLmdwZy5kL2t1YmVybmV0ZXMtYXJjaGl2ZS1rZXlyaW5nLmdwZwojZWNobyAnZGViIGh0dHBzOi8vcGFja2FnZXMuY2xvdWQuZ29vZ2xlLmNvbS9hcHQga3ViZXJuZXRlcy14ZW5pYWwgbWFpbicgPiAvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9rdWJlcm5ldGVzLmxpc3QKCmFwdC1nZXQgdXBkYXRlCmFwdC1nZXQgaW5zdGFsbCAteSBcCglrdWJlbGV0PSQoZ2V0X3ZlcnNpb24ga3ViZWxldCAxLjI3LjEpIFwKCWt1YmVhZG09JChnZXRfdmVyc2lvbiBrdWJlYWRtIDEuMjcuMSkgXAoJa3ViZWN0bD0kKGdldF92ZXJzaW9uIGt1YmVjdGwgMS4yNy4xKSBcCgljcmktdG9vbHMKCiMgTWFrZSB0aGUga3ViZWxldCB1c2Ugb25seSB0aGUgcHJpdmF0ZSBJUCB0byBydW4gaXQncyBtYW5hZ2VtZW50IGNvbnRyb2xsZXIgcG9kcwplY2hvICJLVUJFTEVUX0VYVFJBX0FSR1M9XCItLW5vZGUtaXA9JExPQ0FMX0lQIC0tYWRkcmVzcz0kTE9DQUxfSVAgLS1jbG91ZC1wcm92aWRlcj1leHRlcm5hbFwiIiA+IC9ldGMvZGVmYXVsdC9rdWJlbGV0CgplY2hvICJbLS0tLSBEb25lIHNldHRpbmcgdXAga3ViZXJuZXRlcyBjb25maWd1cmF0aW9ucyAtLS0tLV0iCgprdWJlYWRtIGpvaW4gLS1kaXNjb3ZlcnktdG9rZW4tdW5zYWZlLXNraXAtY2EtdmVyaWZpY2F0aW9uIC0tdG9rZW4ge3suQm9vdHN0cmFwVG9rZW5JRH19Lnt7LkJvb3RzdHJhcFRva2VuU2VjcmV0fX0ge3suQVBJU2VydmVyRW5kcG9pbnR9fQ==
    reservation=prefer
    hostname-pattern=k8s-{{.ClusterName}}-{{.NodeGroup}}-{{.RandString8}}
---
# The following secret is only required when using bootstrap tokens in cloudinit
# like in the above example. For more info on bootstrap tokens check
# https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/
# IMPORTANT: change the token-id & token-secret values below before applying
apiVersion: v1
kind: Secret
type: bootstrap.kubernetes.io/token
metadata:
  name: bootstrap-token-cluster-autoscaler-packet
  namespace: kube-system
stringData:
  description: "The default bootstrap token used by cluster-autoscaler on Equinix Metal."

  # Token ID and secret. Required if using bootstrap tokens in cloudinit (e.g. with kubeadm).
  # token-id must match the regular expression [a-z0-9]{6}
  token-id: TOKEN_ID
  # token-secret must match the regular expression [a-z0-9]{16}
  token-secret: TOKEN_SECRET

  # Expiration. Optional.
  # expiration: 2020-03-10T03:22:11Z

  # Allowed usages.
  usage-bootstrap-authentication: "true"
  usage-bootstrap-signing: "true"

  # Extra groups to authenticate the token as. Must start with "system:bootstrappers:"
  auth-extra-groups: system:bootstrappers:kubeadm:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress
