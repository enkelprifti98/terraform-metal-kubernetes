#!/bin/bash
# vim: syntax=sh

HOSTNAME=$(hostname -s)
LOCAL_IP=$(ip a | grep "inet 10" | cut -d" " -f6 | cut -d"/" -f1)

echo "[----- Setting up Kubernetes using kubeadm ----]"

cat <<EOF >kubeadm-config.yaml
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: $LOCAL_IP
  bindPort: ${kubernetes_port}
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  kubeletExtraArgs:
    cgroup-driver: systemd
    cloud-provider: external
  name: $HOSTNAME
  taints:
  - effect: NoSchedule
    key: kubeadmNode
    value: master
---
apiServer:
  extraArgs:
    bind-address: $LOCAL_IP
    secure-port: "${kubernetes_port}"
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager:
  extraArgs:
    bind-address: $LOCAL_IP
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
    extraArgs:
      advertise-client-urls: https://$LOCAL_IP:2379
      initial-advertise-peer-urls: https://$LOCAL_IP:2380
      initial-cluster: dc13-controller=https://$LOCAL_IP:2380
      initial-cluster-state: new
      listen-client-urls: https://127.0.0.1:2379,https://$LOCAL_IP:2379
      listen-peer-urls: https://$LOCAL_IP:2380
    peerCertSANs:
    - $HOSTNAME
    serverCertSANs:
    - $HOSTNAME
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v${kubernetes_version}
networking:
  dnsDomain: ${kubernetes_dns_domain}
  podSubnet: ${kubernetes_cluster_cidr}
  serviceSubnet: ${kubernetes_service_cidr}
scheduler:
  extraArgs:
    bind-address: $LOCAL_IP
EOF

kubeadm init --config kubeadm-config.yaml

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

echo "[---- Done setting up kubernetes -----]"
